# load("@npm//@bazel/concatjs:index.bzl", "concatjs_devserver")

# package(default_visibility = ["//:__subpackages__"])

# load("@npm//@angular/bazel:index.bzl", "ng_module")
# load("@npm//html-insert-assets:index.bzl", "html_insert_assets")
# load("@io_bazel_rules_sass//:defs.bzl", "sass_binary", "sass_library")
# load("@npm//@bazel/rollup:index.bzl", "rollup_bundle")
# load("@npm//@bazel/terser:index.bzl", "terser_minified")
# load("@npm//history-server:index.bzl", "history_server")
# load("@build_bazel_rules_nodejs//:index.bzl", "pkg_web")
# load("//tools/bazel_less_loader:index.bzl", "less_binary")

# sass_library(
#     name = "sass_lib",
#     srcs = [
#         "//projects/sample-app/src-legacy/app/stylesheets:app.css.scss",
#         "//tools/libs:@medicine-cabinet__sass_lib",
#     ],
# )

# sass_binary(
#     name = "styles",
#     src = "styles.scss",
#     deps = [":sass_lib"],
# )

# ng_module(
#     name = "src",
#     srcs = [
#         "main.dev.ts",
#         "main.prod.ts",
#         "polyfills.ts",
#     ],
#     deps = [
#         "//projects/sample-app/src-legacy",
#         "//projects/sample-app/src/app",
#         "@npm//@angular/core",
#         "@npm//core-js",
#         "@npm//regenerator-runtime",
#     ],
# )

# _ASSETS = [
#     # This label references an output of the "styles" sass_binary above.
#     ":styles.css",

#     # We load zone.js outside the bundle. That's because it's a "pollyfill"
#     # which speculates that such features might be available in a browser.
#     # Also it's tricky to configure dead code elimination to understand that
#     # zone.js is used, given that we don't have any import statement that
#     # imports from it.
#     "@npm//:node_modules/zone.js/dist/zone.min.js",
# ]

# html_insert_assets(
#     name = "inject_scripts_for_dev",
#     outs = ["index.html"],
#     args = [
#         "--html=$(execpath :index.dev.html)",
#         "--out=$@",
#         "--roots=. $(RULEDIR)",
#         "--assets",
#     ] + ["$(execpaths %s)" % s for s in _ASSETS] + [
#         # This file doesn't exist during the build, but will be served by ts_devserver
#         "./_/ts_scripts.js",
#     ],
#     data = [
#         ":index.dev.html",
#     ] + _ASSETS,
# )

# concatjs_devserver(
#     name = "devserver",
#     entry_module = "interfolio/projects/sample-app/main.dev",
#     port = 4299,
#     scripts = [
#         "@npm//:node_modules/@ngrx/store/bundles/store.umd.min.js",
#         "@npm//:node_modules/tslib/tslib.js",
#         "//projects/sample-app/src:umd",
#         "//projects/sample-app/src-legacy:umd",
#     ],
#     static_files = _ASSETS + [
#         ":inject_scripts_for_dev",
#         "//packages/components/src:custom-icons",
#         "//projects/sample-app/assets",
#         "@npm//:node_modules/reflect-metadata/Reflect.js",
#     ],
#     deps = [":src"],
# )

# rollup_bundle(
#     name = "bundle-es2015",
#     config_file = "rollup.config.js",
#     entry_points = {
#         ":main.prod.ts": "index",
#     },
#     output_dir = True,
#     sourcemap = "false",
#     deps = [
#         ":src",
#         "@npm//@rollup/plugin-alias",
#         "@npm//@rollup/plugin-commonjs",
#         "@npm//@rollup/plugin-node-resolve",
#         "@npm//rollup-plugin-amd",
#         "@npm//rollup-plugin-html",
#         "@npm//rollup-plugin-re",
#     ],
# )

# rollup_bundle(
#     name = "bundle-es5",
#     config_file = "rollup.legacy.config.js",
#     entry_points = {
#         ":main.prod.ts": "index",
#     },
#     format = "system",
#     output_dir = True,
#     sourcemap = "true",
#     deps = [
#         ":src",
#         "@npm//@babel/plugin-proposal-class-properties",
#         "@npm//@babel/plugin-proposal-decorators",
#         "@npm//@babel/preset-env",
#         "@npm//@babel/preset-typescript",
#         "@npm//@rollup/plugin-alias",
#         "@npm//@rollup/plugin-commonjs",
#         "@npm//@rollup/plugin-node-resolve",
#         "@npm//rollup-plugin-amd",
#         "@npm//rollup-plugin-babel",
#         "@npm//rollup-plugin-html",
#         "@npm//rollup-plugin-re",
#     ],
# )

# terser_minified(
#     name = "bundle-es2015.min",
#     src = ":bundle-es2015",
#     # NOTE: needed to properly load AngularJS
#     config_file = "terser.config.json",
# )

# terser_minified(
#     name = "bundle-es5.min",
#     src = ":bundle-es5",
#     # NOTE: needed to properly load AngularJS
#     config_file = "terser.config.json",
# )

# genrule(
#     name = "stamped_index_html",
#     srcs = ["index.prod.html"],
#     outs = ["index.stamped.html"],
#     cmd = """
#         sed "s/\\?v=\\\\.*/\\?v=`cat bazel-out/volatile-status.txt | grep -e BUILD_TIMESTAMP | cut -d' ' -f2`/g"             $(location index.prod.html) > $@
#     """,
#     stamp = True,
# )

# html_insert_assets(
#     name = "inject_scripts_for_prod",
#     # we can't output "index.html" since that collides with the devmode file.
#     # pkg_web rule will re-root paths that start with _{name} by default
#     # so we output "_prodapp/projects/sample-app/index.html" so that it is mapped to
#     # `index.html` in the web package.
#     outs = ["_prodapp/projects/sample-app/index.html"],
#     args = [
#         "--html=$(execpath :stamped_index_html)",
#         "--out=$@",
#         "--roots=. $(RULEDIR)",
#         "--assets",
#     ] + ["$(execpaths %s)" % s for s in _ASSETS],
#     data = [":stamped_index_html"] + _ASSETS,
# )

# pkg_web(
#     name = "prodapp",
#     srcs = _ASSETS + [
#         ":bundle-es2015.min",
#         ":bundle-es5.min",
#         ":inject_scripts_for_prod",
#         "//packages/components/src:custom-icons",
#         "//projects/sample-app/assets",
#         "@npm//:node_modules/systemjs/dist/system.js",
#         "@npm//:node_modules/core-js/client/core.min.js",
#         "@npm//:node_modules/regenerator-runtime/runtime.js",
#     ],
#     additional_root_paths = [
#         "npm/node_modules/core-js/client",
#         "npm/node_modules/systemjs/dist",
#         "npm/node_modules/regenerator-runtime",
#     ],
# )

# history_server(
#     name = "prodserver",
#     data = [":prodapp"],
#     templated_args = [
#         "--port",
#         "4299",
#         "-a",
#         "$$(rlocation $(rootpath :prodapp))",
#     ],
# )
